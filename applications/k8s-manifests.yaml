# k8s-manifests.yaml

# Create the sensor-data topic first
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: sensor-data
  namespace: kafka
  labels:
    strimzi.io/cluster: kafka-cluster
spec:
  partitions: 3
  replicas: 3
  config:
    retention.ms: 604800000  # 7 days
    segment.bytes: 1073741824  # 1GB

---

# Secret for database credentials
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: kafka
type: Opaque
data:
  DB_PASSWORD: YjBnWDdsdzZ6RUZpc3B1KSRDdW5xMV18KXFzZA==

---

# ConfigMap for database connection
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  namespace: kafka
data:
  DB_HOST: "test-kafka-db.cyurgzecrh7z.us-east-1.rds.amazonaws.com"
  DB_PORT: "5432"
  DB_NAME: "postgres"
  DB_USER: "postgres"

---

# Kafka Producer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-producer
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-producer
  template:
    metadata:
      labels:
        app: kafka-producer
    spec:
      containers:
      - name: producer
        image: 401413892014.dkr.ecr.us-east-1.amazonaws.com/kafka-producer:latest  # Replace with your image
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
        - name: TOPIC_NAME
          value: "sensor-data"

---

# Consumer API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-consumer-api
  namespace: kafka
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kafka-consumer-api
  template:
    metadata:
      labels:
        app: kafka-consumer-api
    spec:
      containers:
      - name: consumer-api
        image: 401413892014.dkr.ecr.us-east-1.amazonaws.com/kafka-consumer-api:latest  # Replace with your image
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: DB_PASSWORD
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30

---

# Service for Consumer API
apiVersion: v1
kind: Service
metadata:
  name: kafka-consumer-api-service
  namespace: kafka
spec:
  selector:
    app: kafka-consumer-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: ClusterIP

---

# Ingress for external access (optional)
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: kafka-api-ingress
#   namespace: kafka
#   annotations:
#     kubernetes.io/ingress.class: "nginx"  # Adjust based on your ingress controller
# spec:
#   rules:
#   - host: kafka-api.your-domain.com  # Replace with your domain
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: kafka-consumer-api-service
#             port:
#               number: 80

---
# Dashboard Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-dashboard
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-dashboard
  template:
    metadata:
      labels:
        app: kafka-dashboard
    spec:
      containers:
      - name: dashboard
        image: 401413892014.dkr.ecr.us-east-1.amazonaws.com/kafka-dashboard:latest
        ports:
        - containerPort: 3000

---
# Dashboard Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-dashboard-service
  namespace: kafka
spec:
  selector:
    app: kafka-dashboard
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP
